// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// <auto-generated>

using System;
using Microsoft.CodeAnalysis;

namespace Roslynator.Formatting.CSharp
{
    public static partial class DiagnosticDescriptors
    {
        /// <summary>RCS0001</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineAfterEmbeddedStatement = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddEmptyLineAfterEmbeddedStatement, 
            title:              "Add empty line after embedded statement.", 
            messageFormat:      "Add empty line after embedded statement.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddEmptyLineAfterEmbeddedStatement}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0002</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineAfterRegionDirective = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddEmptyLineAfterRegionDirective, 
            title:              "Add empty line after #region.", 
            messageFormat:      "Add empty after #region.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddEmptyLineAfterRegionDirective}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0003</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineAfterUsingDirectiveList = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddEmptyLineAfterUsingDirectiveList, 
            title:              "Add empty line after using directive list.", 
            messageFormat:      "Add empty line after using directive list.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddEmptyLineAfterUsingDirectiveList}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0004</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBeforeClosingBraceOfDoStatement = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddEmptyLineBeforeClosingBraceOfDoStatement, 
            title:              "Add empty line before closing brace of 'do' statement.", 
            messageFormat:      "Add empty line before closing brace of 'do' statement.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddEmptyLineBeforeClosingBraceOfDoStatement}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0005</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBeforeEndRegionDirective = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddEmptyLineBeforeEndRegionDirective, 
            title:              "Add empty line before #endregion.", 
            messageFormat:      "Add empty line before #endregion.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddEmptyLineBeforeEndRegionDirective}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0006</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBeforeUsingDirectiveList = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddEmptyLineBeforeUsingDirectiveList, 
            title:              "Add empty line before using directive list.", 
            messageFormat:      "Add empty line before using directive list.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddEmptyLineBeforeUsingDirectiveList}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0007</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBetweenAccessors = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddEmptyLineBetweenAccessors, 
            title:              "Add empty line between accessors.", 
            messageFormat:      "Add empty line between accessors.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddEmptyLineBetweenAccessors}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0008</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBetweenBlockAndStatement = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddEmptyLineBetweenBlockAndStatement, 
            title:              "Add empty line between block and statement.", 
            messageFormat:      "Add empty line between block and statement.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddEmptyLineBetweenBlockAndStatement}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0009</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBetweenDeclarationAndDocumentationComment = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddEmptyLineBetweenDeclarationAndDocumentationComment, 
            title:              "Add empty line between declaration and documentation comment.", 
            messageFormat:      "Add empty line between declaration and documentation comment.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddEmptyLineBetweenDeclarationAndDocumentationComment}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0010</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBetweenDeclarations = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddEmptyLineBetweenDeclarations, 
            title:              "Add empty line between declarations.", 
            messageFormat:      "Add empty line between declarations.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddEmptyLineBetweenDeclarations}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0011</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBetweenSingleLineAccessors = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddEmptyLineBetweenSingleLineAccessors, 
            title:              "Add empty line between single-line accessors.", 
            messageFormat:      "Add empty line between single-line accessors.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddEmptyLineBetweenSingleLineAccessors}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0012</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBetweenSingleLineDeclarations = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddEmptyLineBetweenSingleLineDeclarations, 
            title:              "Add empty line between single-line declarations.", 
            messageFormat:      "Add empty line between single-line declarations.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddEmptyLineBetweenSingleLineDeclarations}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0013</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBetweenSingleLineDeclarationsOfDifferentKind = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddEmptyLineBetweenSingleLineDeclarationsOfDifferentKind, 
            title:              "Add empty line between single-line declarations of different kind.", 
            messageFormat:      "Add empty line between single-line declarations of different kind.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddEmptyLineBetweenSingleLineDeclarationsOfDifferentKind}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0014</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBetweenSwitchSections = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddEmptyLineBetweenSwitchSections, 
            title:              "Add empty line between switch sections.", 
            messageFormat:      "Add empty line between switch sections.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddEmptyLineBetweenSwitchSections}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0015</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBetweenUsingDirectivesWithDifferentRootNamespace = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddEmptyLineBetweenUsingDirectivesWithDifferentRootNamespace, 
            title:              "Add empty line between using directives with different root namespace.", 
            messageFormat:      "Add empty line between using directives with different root namespace.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddEmptyLineBetweenUsingDirectivesWithDifferentRootNamespace}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0016</summary>
        public static readonly DiagnosticDescriptor AddNewLineAfterAttributeList = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewLineAfterAttributeList, 
            title:              "Add newline after attribute list.", 
            messageFormat:      "Add newline after attribute list.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewLineAfterAttributeList}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0017</summary>
        public static readonly DiagnosticDescriptor AddNewLineAfterBinaryOperatorInsteadOfBeforeIt = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewLineAfterBinaryOperatorInsteadOfBeforeIt, 
            title:              "Add newline after binary operator instead of before it.", 
            messageFormat:      "Add newline after binary operator instead of before it.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewLineAfterBinaryOperatorInsteadOfBeforeIt}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0018</summary>
        public static readonly DiagnosticDescriptor AddNewLineAfterConditionalOperatorInsteadOfBeforeIt = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewLineAfterConditionalOperatorInsteadOfBeforeIt, 
            title:              "Add newline after conditional operator instead of before it.", 
            messageFormat:      "Add newline after conditional operator instead of before it.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewLineAfterConditionalOperatorInsteadOfBeforeIt}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0019</summary>
        public static readonly DiagnosticDescriptor AddNewLineAfterExpressionBodyArrowInsteadOfBeforeIt = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewLineAfterExpressionBodyArrowInsteadOfBeforeIt, 
            title:              "Add newline after expression-body arrow instead of before it.", 
            messageFormat:      "Add newline after expression-body arrow instead of before it.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewLineAfterExpressionBodyArrowInsteadOfBeforeIt}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0020</summary>
        public static readonly DiagnosticDescriptor AddNewLineAfterOpeningBraceOfAccessor = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewLineAfterOpeningBraceOfAccessor, 
            title:              "Add newline after opening brace of accessor.", 
            messageFormat:      "Add newline after opening brace of accessor.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewLineAfterOpeningBraceOfAccessor}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0021</summary>
        public static readonly DiagnosticDescriptor AddNewLineAfterOpeningBraceOfBlock = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewLineAfterOpeningBraceOfBlock, 
            title:              "Add newline after opening brace of block.", 
            messageFormat:      "Add newline after opening brace of block.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewLineAfterOpeningBraceOfBlock}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0022</summary>
        public static readonly DiagnosticDescriptor AddNewLineAfterOpeningBraceOfEmptyBlock = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewLineAfterOpeningBraceOfEmptyBlock, 
            title:              "Add newline after opening brace of empty block.", 
            messageFormat:      "Add newline after opening brace of empty block.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewLineAfterOpeningBraceOfEmptyBlock}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0023</summary>
        public static readonly DiagnosticDescriptor AddNewLineAfterOpeningBraceOfTypeDeclaration = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewLineAfterOpeningBraceOfTypeDeclaration, 
            title:              "Add newline after opening brace of type declaration.", 
            messageFormat:      "Add newline after opening brace of type declaration.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewLineAfterOpeningBraceOfTypeDeclaration}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0024</summary>
        public static readonly DiagnosticDescriptor AddNewLineAfterSwitchLabel = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewLineAfterSwitchLabel, 
            title:              "Add newline after switch label.", 
            messageFormat:      "Add newline after switch label.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewLineAfterSwitchLabel}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0025</summary>
        public static readonly DiagnosticDescriptor AddNewLineBeforeAccessorOfFullProperty = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewLineBeforeAccessorOfFullProperty, 
            title:              "Add newline before accessor of full property.", 
            messageFormat:      "Add newline before accessor of full property.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewLineBeforeAccessorOfFullProperty}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0027</summary>
        public static readonly DiagnosticDescriptor AddNewLineBeforeBinaryOperatorInsteadOfAfterIt = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewLineBeforeBinaryOperatorInsteadOfAfterIt, 
            title:              "Add newline before binary operator instead of after it.", 
            messageFormat:      "Add newline before binary operator instead of after it.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewLineBeforeBinaryOperatorInsteadOfAfterIt}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0028</summary>
        public static readonly DiagnosticDescriptor AddNewLineBeforeConditionalOperatorInsteadOfAfterIt = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewLineBeforeConditionalOperatorInsteadOfAfterIt, 
            title:              "Add newline before conditional operator instead of after it.", 
            messageFormat:      "Add newline before conditional operator instead of after it.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewLineBeforeConditionalOperatorInsteadOfAfterIt}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0029</summary>
        public static readonly DiagnosticDescriptor AddNewLineBeforeConstructorInitializer = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewLineBeforeConstructorInitializer, 
            title:              "Add newline before constructor initializer.", 
            messageFormat:      "Add newline before constructor initializer.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewLineBeforeConstructorInitializer}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0030</summary>
        public static readonly DiagnosticDescriptor AddNewLineBeforeEmbeddedStatement = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewLineBeforeEmbeddedStatement, 
            title:              "Add newline before embedded statement.", 
            messageFormat:      "Add newline before embedded statement.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewLineBeforeEmbeddedStatement}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0031</summary>
        public static readonly DiagnosticDescriptor AddNewLineBeforeEnumMember = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewLineBeforeEnumMember, 
            title:              "Add newline before enum member.", 
            messageFormat:      "Add newline before enum member.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewLineBeforeEnumMember}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0032</summary>
        public static readonly DiagnosticDescriptor AddNewLineBeforeExpressionBodyArrowInsteadOfAfterIt = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewLineBeforeExpressionBodyArrowInsteadOfAfterIt, 
            title:              "Add newline before expression-body arrow instead of after it.", 
            messageFormat:      "Add newline before expression-body arrow instead of after it.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewLineBeforeExpressionBodyArrowInsteadOfAfterIt}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0033</summary>
        public static readonly DiagnosticDescriptor AddNewLineBeforeStatement = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewLineBeforeStatement, 
            title:              "Add newline before statement.", 
            messageFormat:      "Add newline before statement.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewLineBeforeStatement}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0034</summary>
        public static readonly DiagnosticDescriptor AddNewLineBeforeTypeParameterConstraint = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewLineBeforeTypeParameterConstraint, 
            title:              "Add newline before type parameter constraint.", 
            messageFormat:      "Add newline before type parameter constraint.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewLineBeforeTypeParameterConstraint}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0035</summary>
        public static readonly DiagnosticDescriptor RemoveEmptyLineBetweenSingleLineAccessors = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.RemoveEmptyLineBetweenSingleLineAccessors, 
            title:              "Remove empty line between single-line accessors.", 
            messageFormat:      "Remove empty line between single-line accessors.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.RemoveEmptyLineBetweenSingleLineAccessors}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0036</summary>
        public static readonly DiagnosticDescriptor RemoveEmptyLineBetweenSingleLineDeclarationsOfSameKind = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.RemoveEmptyLineBetweenSingleLineDeclarationsOfSameKind, 
            title:              "Remove empty line between single-line declarations of same kind.", 
            messageFormat:      "Remove empty line between single-line declarations of same kind.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.RemoveEmptyLineBetweenSingleLineDeclarationsOfSameKind}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0037</summary>
        public static readonly DiagnosticDescriptor RemoveEmptyLineBetweenUsingDirectivesWithDifferentRootNamespace = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.RemoveEmptyLineBetweenUsingDirectivesWithDifferentRootNamespace, 
            title:              "Remove empty line between using directives with different root namespace.", 
            messageFormat:      "Remove empty line between using directives with different root namespace.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.RemoveEmptyLineBetweenUsingDirectivesWithDifferentRootNamespace}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0038</summary>
        public static readonly DiagnosticDescriptor RemoveEmptyLineBetweenUsingDirectivesWithSameRootNamespace = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.RemoveEmptyLineBetweenUsingDirectivesWithSameRootNamespace, 
            title:              "Remove empty line between using directives with same root namespace.", 
            messageFormat:      "Remove empty line between using directives with same root namespace.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.RemoveEmptyLineBetweenUsingDirectivesWithSameRootNamespace}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0039</summary>
        public static readonly DiagnosticDescriptor RemoveNewLineBeforeBaseList = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.RemoveNewLineBeforeBaseList, 
            title:              "Remove newline before base list.", 
            messageFormat:      "Remove newline before base list.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.RemoveNewLineBeforeBaseList}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0040</summary>
        public static readonly DiagnosticDescriptor RemoveNewLineBetweenClosingBraceAndWhileKeyword = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.RemoveNewLineBetweenClosingBraceAndWhileKeyword, 
            title:              "Remove newline between closing brace and 'while' keyword.", 
            messageFormat:      "Remove newline between closing brace and 'while' keyword.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.RemoveNewLineBetweenClosingBraceAndWhileKeyword}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0041</summary>
        public static readonly DiagnosticDescriptor RemoveNewLineBetweenIfKeywordAndElseKeyword = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.RemoveNewLineBetweenIfKeywordAndElseKeyword, 
            title:              "Remove newline between 'if' keyword and 'else' keyword.", 
            messageFormat:      "Remove newline between 'if' keyword and 'else' keyword.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.RemoveNewLineBetweenIfKeywordAndElseKeyword}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0042</summary>
        public static readonly DiagnosticDescriptor RemoveNewLinesFromAccessorListOfAutoProperty = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.RemoveNewLinesFromAccessorListOfAutoProperty, 
            title:              "Remove newlines from accessor list of auto-property.", 
            messageFormat:      "Remove newlines from accessor list of auto-property.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.RemoveNewLinesFromAccessorListOfAutoProperty}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0043</summary>
        public static readonly DiagnosticDescriptor RemoveNewLinesFromAccessorWithSingleLineExpression = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.RemoveNewLinesFromAccessorWithSingleLineExpression, 
            title:              "Remove newlines from accessor with single-line expression.", 
            messageFormat:      "Remove newlines from accessor with single-line expression.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.RemoveNewLinesFromAccessorWithSingleLineExpression}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0044</summary>
        public static readonly DiagnosticDescriptor UseCarriageReturnAndLinefeedAsNewLine = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.UseCarriageReturnAndLinefeedAsNewLine, 
            title:              "Use carriage return + linefeed as newline.", 
            messageFormat:      "Use carriage return + linefeed as newline.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.UseCarriageReturnAndLinefeedAsNewLine}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0045</summary>
        public static readonly DiagnosticDescriptor UseLinefeedAsNewLine = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.UseLinefeedAsNewLine, 
            title:              "Use linefeed as newline.", 
            messageFormat:      "Use linefeed as newline.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.UseLinefeedAsNewLine}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0046</summary>
        public static readonly DiagnosticDescriptor UseSpacesInsteadOfTab = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.UseSpacesInsteadOfTab, 
            title:              "Use spaces instead of tab.", 
            messageFormat:      "Use spaces instead of tab.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.UseSpacesInsteadOfTab}", 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0047</summary>
        public static readonly DiagnosticDescriptor WrapAndIndentEachNodeInList = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.WrapAndIndentEachNodeInList, 
            title:              "Wrap and indent each node in list.", 
            messageFormat:      "Wrap and indent each node in list.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.WrapAndIndentEachNodeInList}", 
            customTags:         Array.Empty<string>());

    }
}